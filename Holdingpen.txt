  elif request.method == "POST":
        if  request.form['password'] != request.form['password2']:
            return redirect(url_for('register')) 
        else:
            username = request.form['userid']
            email = request.form['email']
            password = request.form['password']
            encryptedPass = pbkdf2_sha256.hash(password)
            mongo.db.users.insert_one({
                'username': username,
                'email': email,
                'password': encryptedPass,
            })
            return redirect(url_for('login'))


            
    elif request.method == "POST":
        username = request.form['userid']
        email = request.form['email']
        password = request.form['password']

        if password === "null":
            username = request.form['userid']
            email = request.form['email']
            password = request.form['password']
            encryptedPass = pbkdf2_sha256.hash(password)
            mongo.db.users.replace_one({'_id': ObjectId(user_id)},
                {
                'username': username,
                'email': email,
                'password': encryptedPass,
            })
            return redirect(url_for('admin.registeredusers'))
        else:
            username = request.form['userid']
            email = request.form['email']
            mongo.db.users.replace_one({'_id': ObjectId(user_id)},
                { '$set':
                    {
                    'username': username,
                    'email': email,
                    }
            })
            return redirect(url_for('admin.registeredusers'))


@admin.route("/update_user/<user_id>", methods=['GET','POST']) 
@check_logged_in
def update_user(user_id):

    if request.method == "GET":
        user_info = mongo.db.users.find_one({'_id': ObjectId(user_id)})
        return render_template("updateuser.html", page_title="Update User", user_info=user_info)

    elif request.method == "POST":
        password = request.form['password']

        if password == "null":
            username = request.form['userid']
            email = request.form['email']
            mongo.db.users.replace_one({'_id': ObjectId(user_id)},
                { '$set':
                    {
                    'username': username,
                    'email': email,
                    }
            })
            return redirect(url_for('admin.registeredusers'))
        else:    
            username = request.form['userid']
            email = request.form['email']
            password = request.form['password']
            encryptedPass = pbkdf2_sha256.hash(password)
            mongo.db.users.replace_one({'_id': ObjectId(user_id)},
                {
                'username': username,
                'email': email,
                'password': encryptedPass,
            })
            return redirect(url_for('admin.registeredusers'))

            function passwordupdate(){
    document.getElementById('pass').innerHTML = `<input type="password" name="password" id="password1" placeholder="Password:" required><br>
                            <input type="password" class="" id="password2" placeholder="Confirm Password:" required></input>`
}

{%  extends 'base.html' %}

{% block title%}
{{ page_title }}
{%endblock%}

{% block css %}
<link rel="stylesheet" href="{{url_for ('admin.static', filename='css/admin.css')}}" type="text/css">
{% endblock %}

{% block content %}
        <div class="conatiner">
            <div class="row">
                <div class="col-sm-12 loginbox">
                    <div class="loginbox1">
                        <h5>Update User Info</h5>
                        <form method="POST" action="{{ url_for('admin.update_user', user_id=user_info._id) }}">
                            <input type="text" name="userid" placeholder="Username:" value="{{ user_info.username}}" ><br>
                            <input type="email" name="email" placeholder="Email:" value="{{ user_info.email}}"><br>
                            <input type="password" name="password"  value="null"><br>
                            <div >To update password click here</div><a href='#' onclick="passwordupdate()" class="btn btn-info loginButton" >password update</a>
                            <div id="pass"></div>
                            <div class="doNotMatch" id="doNotMatch"></div>
                            <div id="submitButton"><span><Button class="btn btn-secondary loginButton" type="submit">Update</Button></span></div>    
                        </form>
                        <a class="btn btn-info loginButton" href="{{ url_for ('admin.registeredusers') }}">Cancel</a>
                    </div>
                </div>
            </div>
        </div>

{% endblock %}

{% block script %}

<script src="{{url_for('admin.static', filename='js/login.js')}}"></script>

{% endblock %}

   let languages = github_repo_return[i].languages_url;
        
        let api_request = new XMLHttpRequest();
        api_request.open("GET", languages);
        // starts the request
        api_request.send();
        api_request.onreadystatechange = function () {
            if (this.readyState == 4 && this.status == 200) {
                let languages_back = api_request.responseText;
                var github_repo_languages_return = JSON.parse(languages_back);
            }

            for (let j = 0; j < github_repo_languages_return.length; j++){

                let languages = github_repo_languages_return[j];
                console.log(languages);
            }
        }

        GITHUB_API_KEY = os.getenv("GITHUB_API_KEY")

             <div class="row">
            {% for b in blogs|reverse %}
            <div class="col-sm-3">
                <img class="blogimage" src="{{b.image}}" alt="blog image">
                <h1>{{ b.name }}</h1>
                <h3>{{ b.title }}</h3>
                <span>Date Created: {{ b.created }}</span>
                <span>Date Updated: {{ b.updated }}</span>
                <a class="btn btn-primary form-button" href="{{ url_for ('blog.read_post', post_id=b._id)}}">Read</a>
            </div>
            {% endfor %}
        </div>

jQuery

$(document).ready(function(){
	$("div").hide();
  $("button").click(function(){
  $("div").fadeIn({queue: false, duration: 2000});
  $("div").animate({left: '250px'}, 2000);
    
  });
});


I am friendly and cheerful, with a strong sense of commitment and attention to detail
                in life.
                I always strive to progress, both on a personal level and within the workplace. In order to stay ahead
                of fast moving
                changes in product engineering and technology I am well practiced at adapting, learning and refining new
                skills quickly.
                I pride myself on being articulate and being able to communicate with people at all levels and am able
                to work well as
                part of a team or on my own initiative.</p>
            <p>
                Formerly from a background in primary engineering, I have recently retrained as a web developer,
                bringing with me a love of problem-solving, strong attention to detail and a focus on UX.
                Throughout my career, I have worked in highly skilled roles that involved interacting with the public
                and colleagues to find practical solutions to technical problems. My career change was prompted by
                discovering a love for writing code to benefit my own projects working with microcontrollers and
                automation.


~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

/* This function  hides the orininal footer as the orininal footer would not stay at the bottom
of the page while html was injected in to the dom, instead it is hidden and then a hard coded version 
is then displayed via css display block once the page has loaded and the api results are back to display*/
$(document).ready(function(){
    document.getElementById('githubHide').className = "githubHide";
});

/* These Functions start automatically when the page is loaded and sends a request to the 
gitHub API, requesting all my repos in an array, I then iterate them out with a for loop
and inject them into the dom with template literals */

$(document).ready(function (getRepos) {

    // loading Spinner
    document.getElementById('overlayBox').innerHTML = `<div id="overlay"><div class="spinner" id="spinner">
    <iframe onclick="none" src="static/images/pacman.gif" frameBorder="0" class="pacmanSpinner" >
    </iframe></div><span class="loadingText">LOADING PLEASE WAIT!</span>`;

    // Api call to GitHub to pull my repository data
    let api_request = new XMLHttpRequest();
    let endpoint = "https://api.github.com/users";
    let user = "jonathanw82";
    let query = "repos?page=1&per_page=50";

    // opens the request and sends the parameters
    api_request.open("GET", endpoint + "/" + user + "/" + query);
    // starts the request
    api_request.send();

    // Waiting for the api to return the data
    api_request.onreadystatechange = function () {
        if (this.readyState == 4 && this.status == 200) {
            let the_response = api_request.responseText;
            let github_repo_return = JSON.parse(the_response);
            displayGitHubData(github_repo_return);
            document.getElementById('overlayBox').innerHTML = "";
        }
        else if (this.status == 404) {
            // The message warns us that the server has an error 404
            document.getElementById('overlayBox').innerHTML = "";
            document.getElementById('warning').innerHTML = `<span><h2>Look's like something went gone wrong try 
                                                                    refreshing or come back later!</h2></span>`;
        }
        else if (this.status == 403) {
            // This message warns us we have exceeded out hourly limit of requests 403 to the
            // github server and display a time we can comeback and try again. 
            var resetTime = new Date(this.getResponseHeader('X-RateLimit-Reset') * 1000);
            document.getElementById('overlayBox').innerHTML = "";
            document.getElementById('warning').innerHTML = `<span><h2>Oops looks like we have reached our limits 
                                                            please try again on <br> ${resetTime}<br>Sorry for any inconvenience!</h2></span>`;
        }

    };
});

function displayGitHubData(github_repo_return) {
    // Total repos are displayed by this hTML injection
    let total_repos = github_repo_return.length;
    document.getElementById('repoNumbers').innerHTML = `<p>Total number of Repositories to display ${total_repos}</p>`;

    // this for loop iterates through the array sent from github and displayes the data 
    // on the HTML page.
    for (let i = 0; i < github_repo_return.length; i++) {
        
        let repoName = github_repo_return[i].name;
        let repoURL = github_repo_return[i].html_url;
        let description = github_repo_return[i].description;

        // if the repo names equal my preset names give them there coresponding images.
        if (repoName == "Can_Share") {
            repoImage = "/static/images/canshareRepoImage.jpg";
            // livelink = "href= 'https://jonathanw82-canshare.herokuapp.com/'"
        }
        else if (repoName == "bristol-central-gym") {
            repoImage = "/static/images/bristCentralRepoImage.jpg";
        }
        else if (repoName == "HydroBigTent") {
            repoImage = "/static/images/hydroRepoImage.jpg";
        }
        else if (repoName == "myfavoritetune") {
            repoImage = "/static/images/musicTrackRepoImage.jpg"
        }
        else if (repoName == "Soil_Watering") {
            repoImage = "/static/images/soilwaterRepoImage.jpg";
        }
        else if (repoName == "the-honey-pot") {
            repoImage = "/static/images/honeypotrepoImage.jpg";
        }
        else if (repoName == "cv") {
            repoImage = "/static/images/cvrepoiamgegithub.jpg";
        }
        else if (repoName == "monster-rolodex") {
            repoImage = "/static/images/rolodex.png";
        }
        else if (repoName == "blog") {
            repoImage = "/static/images/blog.jpg";
        }
        else if (repoName == "Coffee") {
            repoImage = "/static/images/coffeerepoimage.jpg";
        }
        else if (repoName == "eastbristolhops") {
            repoImage = "/static/images/ebh.jpg";
        }
        else if (repoName == "network_test") {
            repoImage = "/static/images/intcon.jpg";
        }        
        else {
            repoImage = "https://image.flaticon.com/icons/svg/25/25231.svg";
        }

        document.getElementById('displayRepos').innerHTML += `<div class="col-lg-4 col-md-6 mx-auto card-col"><a class="card-a" href="${repoURL}" target="_blank"><div class="card">
        <img class="card-img-top" id="cardImageSrc" src="${repoImage}" alt="repo image">
        <div class="card-body"><h5 class="card-title">${repoName}</h5>
        <p class="card-text">${description}</p></div></div></a></div>`;
    };
    // Shows the new footer
    document.getElementById('tempFooter').classList.add("tempFooterShow");
}